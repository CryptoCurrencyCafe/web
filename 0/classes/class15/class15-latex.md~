% Class 15: Selfish Mining
% 2015-03-04

## Schedule

   <div class="todo"> 

- [Project 2 Part
  2](|filename|../../pages/projects/project2/project2.md) is due next
  **Thursday, 5 March.** Submission is by email, send a PDF with your
  answers to questions 5-9.

- Keep thinking about ideas for your project.  The first deliverable for
  the project will be a preliminary proposal due on March 19.

   </div>
<!--
<center> 
<iframe src="//www.slideshare.net/slideshow/embed_code/45339406" width="670" height="380" frameborder="2" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div class="caption">Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  <br>If you [download the slides](|filename|./class14-inked.pptx), they are present though.
Hopefully, the player will be fixed someday. </div>
</center>
-->

# Bitcoin Script

Transaction outputs in bitcoin are protected by _locking scripts_, and
must be unlocked by _unlocking scripts_.  The scripts are written in a
simple (compared to, say, the Java Virtual Machine language, but quite
complex and poorly specified for what one might expect would be needed
for bitcoin transactions) stack-based language.  A transaction output is
not unlocked unless an unlocking script is provided such that the result
of executing the unlocking script, followed by executing the locking
script, is a stack with value True on top (and no invalid transaction
results during the execution).

Some script instructions:

|Opcode|Input|Output|Description|
|--|--|--|--|
|`OP_1`| - | **1** | Pushes a **1** (True) on the stack |
|`OP_DUP`| _a_ | _a_ _a_ | Duplicates the top element of the stack |
|`OP_ADD`| _a_ _b_ | (_a_+_b_) | Pushes the sum of the top two elements. |
|`OP_EQUAL`| _a_ _b_ | **0** or **1** | Pushes **1** if the top two elements are exactly equal, otherwise **0**. |
|`OP_VERIFY` | _a_ | - | If _a_ is not **True** (**1**), terminates as Invalid. |
|`OP_RETURN`| - | - | Terminates as Invalid. |
|`OP_EQUALVERIFY` | _a_ _b_ | - | If _a_ and _b_ are not equal, terminates as Invalid. |
|`OP_HASH160` | _a_ | H(_a_) | Pushes bitcoin address, RIPEMD(SHA256(_a_)). |

Some more complex instructions:

`OP_IF` [statements] `OP_ENDIF` - If the top of the stack is **1**, executes [statements].  Otherwise does nothing.

`OP_CHECKSIG` - Pops two items from the stack, _publickey_ and _sig_.
Verifies the entire transaction (known from node state, not the stack)
using the _publickey_ and _sig_.  If the signature is valid, push **1**;
otherwise, **0**.

`OP_1 OP_DUP OP_ADD OP_DUP OP_SUB OP_VERIFY`

\clearpage

The most common locking script (send to public address):  
`OP_DUP`  
`OP_HASH160`  
`OP_DATA20` _(bitcoin address)_  
`OP_EQUALVERIFY`  
`OP_CHECKSIG`  

What must be on the stack for the locking script to succeed (end with **1** on top of stack)?
<div class="gap">
#
#
</div>

According to [Most Popular Transaction
Scripts](http://www.quantabytes.com/articles/a-survey-of-bitcoin-transaction-types)
(analysis of all transactions in first 290,000 blocks), the ninth most popular script is:
`OP_RETURN OP_DATA_40`

What must be on the stack for the locking script to succeed (end with
**1** on top of stack)? (Trick question: what happens to the coin
protected by this locking script?)
<div class="gap">
#
#
</div>


Is the bitcoin scripting language Turing-complete?
<div class="gap">
#
#
</div>


[Execute](https://github.com/btcsuite/btcd/blob/c153596542b3d87dd774c29aa5be5117ac01a234/txscript/script.go#L723)


[Script Playground](http://www.crmarsh.com/script-playground/)

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cryptocurrency Cafe</title><link href="http://bitcoin-class.org/" rel="alternate"></link><link href="http://bitcoin-class.org/feeds/all.atom.xml" rel="self"></link><id>http://bitcoin-class.org/</id><updated>2015-02-04T00:00:00-05:00</updated><entry><title>Class 7: Merkle Trees</title><link href="http://bitcoin-class.org/class-7-merkle-trees.html" rel="alternate"></link><updated>2015-02-04T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-02-04:class-7-merkle-trees.html</id><summary type="html">&lt;p&gt;&lt;div class="phighlight"&gt;
   &lt;a href="http://bitcoin-class.org/classes/class7/class7.pdf"&gt;PDF version for printing&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;p&gt;&lt;div class="todo"&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you didnâ€™t get full credit for Project 1 because of failure to post
  something interesting, you can (and should!) redeem yourself and earn
  full credit by &lt;strong&gt;posting an interesting comment by Thursday&lt;/strong&gt;.  It can
  be on (1) Discussion questions from Project 1 (2) notes from classes,
  or (3) general forum.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Quiz&lt;/strong&gt;: We'll have a short, closed resources quiz in class on
    &lt;strong&gt;Wednesday, 11 February&lt;/strong&gt;.  The point of the quiz is to see how
    well people are understanding the core ideas we've covered so far
    (including today).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read&lt;/strong&gt; (by Monday): &lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch06.asciidoc"&gt;&lt;em&gt;Chapter 6: The Bitcoin
Network&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch07.asciidoc"&gt;&lt;em&gt;Chapter 7: The
Blockchain&lt;/em&gt;&lt;/a&gt;
from Andreas Antonopoulos' book.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I am away the rest of this week, so will not have office hours on
  Thursday.  (I am, of course, still available by email and course web
  site.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In Monday's class, Nick and Alex will explain what is provided and
what you need to do for project 2.  You should at least set up your node
for project 2 before class Monday (details will be posted tomorrow).
You will also have an opportunity to ask questions about anything we
have covered so far.  If you have questions you want answered, or topics
you'd like discussed, you can post them in the comments for these notes (or email me directly).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;!--
&lt;center&gt; 
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/43918186" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;br&gt;
&lt;div class="caption"&gt;Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  &lt;br&gt;If you download the slides, they are present though.
Hopefully, the player will be fixed someday. &lt;/div&gt;
&lt;/center&gt;
--&gt;

&lt;h1&gt;Exploring Blocks&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Label&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Bytes&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Block version information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;prev_block&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Hash of the previous block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;merkle_root&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;Hash of Merkle tree of all transactions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;When block was created (overflows in 2106)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bits&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Difficulty target used for this block&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nonce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Nonce found to generate this block&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href="http://blockexplorer.com/b/341537"&gt;Block 341537&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;000000000000000002b32e242989056214fef31c5aac08ae517840db3e3e7fd2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;ver&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;prev_block&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;000000000000000014a97984448f2b3e5b8582ece719be1a1ea7db1d1fce5561&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mrkl_root&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;d634ceec0d9a8b065ad3203555b74877d0476e0b302972be41671a6b92a0a066&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1422830051&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;bits&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;404399040&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;nonce&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;527809407&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;n_tx&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1511&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;760657&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;tx&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;57db55dadb51ceeee6417af30946f234b2f77613e40586a2c03ce5e3a2be8bbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;ver&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3533&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;prev_out&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0000000000000000000000000000000000000000000000000000000000000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4294967295&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1.00076629&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;675e40df163d5ae4556774b325cdd7b0885d552bf7989d5e24f7039fce315a5b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;prev_out&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;04e9c75d42093094a486a1c898527f4b50e1788fe4fda3ecb2574662b75b6f90&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;out&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.00100000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;scriptPubKey&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OP_DUP OP_HASH160 9e21abc1748a1df63b4016ac313c0f88e557d5fd ...&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.00710182&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;scriptPubKey&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OP_DUP OP_HASH160 e37cd341540dd1e912568ae5b004d62422bd6b38 ...&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;     
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;mrkl_tree&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;57db55dadb51ceeee6417af30946f234b2f77613e40586a2c03ce5e3a2be8bbb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;66a3eea4610dfb7d7987ad4fc22392c7964340d21006c1eea4c88174fd660c58&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;675e40df163d5ae4556774b325cdd7b0885d552bf7989d5e24f7039fce315a5b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- # Merkle's Puzzles

Ralph Merkle, [_Publishing a New Idea_](http://merkle.com/1974/).
Includes his [cs244 project
proposal](http://merkle.com/1974/FirstCS244projectProposal.pdf)
("Discussion: No, I am not joking.") and [ACM rejection
letter](http://merkle.com/1974/ExpertLetter.pdf) ("I am sorry to have to
inform you that the paper is not in the main stream of present
cryptography thinking and I would not recommend that it be
published...").

**Construction.**
--&gt;

&lt;h1&gt;Merkle Trees&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/btcsuite/btcd/blob/master/blockchain/merkle.go"&gt;https://github.com/btcsuite/btcd/blob/master/blockchain/merkle.go&lt;/a&gt; (some comments removed)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// HashMerkleBranches takes two hashes, treated as the left and right tree&lt;/span&gt;
&lt;span class="c1"&gt;// nodes, and returns the hash of their concatenation. &lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;HashMerkleBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShaHash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShaHash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShaHash&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;sha&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HashSize&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;
   &lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HashSize&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HashSize&lt;/span&gt;&lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
   &lt;span class="nx"&gt;newSha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewShaHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DoubleSha256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;[:]))&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newSha&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nx"&gt;BuildMerkleTreeStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;btcutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Tx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShaHash&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nextPoT&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;nextPowerOfTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;arraySize&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;nextPoT&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nx"&gt;merkles&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;btcwire&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ShaHash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arraySize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// Create the base transaction shas and populate the array with them.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="nx"&gt;transactions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Sha&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Start the array offset after the last transaction and adjusted to the&lt;/span&gt;
    &lt;span class="c1"&gt;// next power of two.&lt;/span&gt;
    &lt;span class="nx"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;nextPoT&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;arraySize&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
              &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;

           &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nx"&gt;newSha&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;HashMerkleBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
              &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newSha&lt;/span&gt;

           &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nx"&gt;newSha&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nx"&gt;HashMerkleBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
              &lt;span class="nx"&gt;merkles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newSha&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;merkles&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="/classes/class7/merkle.png"&gt;&lt;img src="/classes/class7/merkle.png" width=600&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What is needed to verify &lt;span class="math"&gt;T&lt;sub&gt;2&lt;/sub&gt;&lt;/span&gt; in &lt;span class="math"&gt;H&lt;sub&gt;root&lt;/sub&gt;&lt;/span&gt;$?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;What must be recomputed if &lt;span class="math"&gt;T&lt;sub&gt;3&lt;/sub&gt;&lt;/span&gt; is replaced?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;What must be computed if a new node, &lt;span class="math"&gt;T&lt;sub&gt;5&lt;/sub&gt;&lt;/span&gt;, is added?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;How many SHA-256 hashes must be computed to verify &lt;a href="http://blockexplorer.com/b/341537"&gt;Block 341537&lt;/a&gt;?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;</summary></entry><entry><title>Class 6: Proofs of Work</title><link href="http://bitcoin-class.org/class-6-proofs-of-work.html" rel="alternate"></link><updated>2015-02-02T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-02-02:class-6-proofs-of-work.html</id><summary type="html">&lt;p&gt;&lt;div class="phighlight"&gt;
   &lt;a href="http://bitcoin-class.org/classes/class6/class6.pdf"&gt;PDF version for printing&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;div class="todo"&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you didnâ€™t get full credit for Project 1 because of failure to post
  something interesting, you can (and should!) redeem yourself and earn
  full credit by &lt;strong&gt;posting an interesting comment by Thursday&lt;/strong&gt;.  It can
  be on (1) Discussion questions from Project 1 (2) notes from classes,
  or (3) general forum.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; &lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch06.asciidoc"&gt;&lt;em&gt;Chapter 6: The Bitcoin
Network&lt;/em&gt;&lt;/a&gt;,
&lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch07.asciidoc"&gt;&lt;em&gt;Chapter 7: The
Blockchain&lt;/em&gt;&lt;/a&gt;
from Andreas Antonopoulos' book.  (Ideally, you should finish these
before Wednesday's class, but at the latest by Monday, 9 Feb.)
   &lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt; 
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/44177245" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;
&lt;div class="caption"&gt;Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  &lt;br&gt;If you download the slides, they are present though.
Hopefully, the player will be fixed someday. &lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h1&gt;Trust&lt;/h1&gt;
&lt;p&gt;What are valid sources of &lt;em&gt;trust&lt;/em&gt;?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;What are invalid sources of &lt;em&gt;trust&lt;/em&gt;?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;What mechanisms have humans evolved or constructed to enhance trust among strangers?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;Distributed Consensus&lt;/h1&gt;
&lt;p&gt;How well does the 2-out-of-3 network consensus public ledger protocol work?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;Proof-of-Work&lt;/h1&gt;
&lt;p&gt;Cynthia Dwork and Moni Naor.  &lt;a href="http://bitcoin-class.org/classes/class6/pvp.pdf"&gt;&lt;em&gt;Pricing via Processing or Combatting Junk Mail&lt;/em&gt;&lt;/a&gt;, CRYPTO 1992.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pricing Function&lt;/strong&gt;: (&lt;span class="math"&gt;&lt;em&gt;f&lt;/em&gt;&lt;/span&gt;)
- moderately easy to compute
- cannot be amortized 
- computing &lt;span class="math"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;), ..., &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;&lt;sub&gt;l&lt;/sub&gt;)&lt;/span&gt; costs &lt;span class="math"&gt;&lt;em&gt;l&lt;/em&gt;&lt;/span&gt; times as much as computing &lt;span class="math"&gt;&lt;em&gt;f&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;&lt;sub&gt;i&lt;sub&gt;)&lt;/span&gt;. 
- easily verified: given &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;&lt;em&gt;y&lt;/em&gt;&lt;/span&gt; easy to check &lt;span class="math"&gt;&lt;em&gt;y&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Adam Back. &lt;a href="http://www.hashcash.org/papers/announce.txt"&gt;&lt;em&gt;Hash Cash Postage Implementation&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interactive Hashcash&lt;/strong&gt;:&lt;br /&gt;
1. Sender to Receiver: &lt;code&gt;Hello&lt;/code&gt;&lt;br /&gt;
2. Receiver to Sender: &lt;span class="math"&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; (random nonce)&lt;br /&gt;
3. Sender to Receiver: &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;, &lt;code&gt;Mail&lt;/code&gt; where &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)&lt;/span&gt;.&lt;br /&gt;
4. Receiver verifies &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt; = &lt;em&gt;f&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;How well does this protocol work for sending mail?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Suppose we use SHA-256 for &lt;span class="math"&gt;&lt;em&gt;f&lt;/em&gt;&lt;/span&gt;?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;How can we make this protocol non-interactive?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;Bitcoin Mining&lt;/h1&gt;
&lt;p&gt;Proof-of-work: Find an &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; such that: SHA-256(SHA-256(&lt;span class="math"&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; + &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;)) &amp;lt; &lt;span class="math"&gt;&lt;em&gt;T&lt;/em&gt;/&lt;em&gt;d&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;&lt;em&gt;d&lt;/em&gt;&lt;/span&gt; is the "difficulty" (varies).&lt;br /&gt;
&lt;span class="math"&gt;&lt;em&gt;T&lt;/em&gt;&lt;/span&gt; is a fixed target (256-bit number).&lt;br /&gt;
&lt;span class="math"&gt;&lt;em&gt;r&lt;/em&gt;&lt;/span&gt; depends on hash of previous block, transactions, and other information.&lt;/p&gt;
&lt;p&gt;What does it mean for the bitcoin difficulty to go down?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/bitcoin/bitcoin/blob/master/src/miner.cpp"&gt;BitcoinMiner&lt;/a&gt; (code from core Bitcoin implementation)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;// ScanHash scans nonces looking for a hash with at least some zero bits.&lt;/span&gt;
&lt;span class="c1"&gt;// The nonce is usually preserved between calls, but periodically or if the&lt;/span&gt;
&lt;span class="c1"&gt;// nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at&lt;/span&gt;
&lt;span class="c1"&gt;// zero.&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;ScanHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;CBlockHeader&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nNonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;phash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Write the first 76 bytes of the block header to a double-SHA256 state.&lt;/span&gt;
    &lt;span class="n"&gt;CHash256&lt;/span&gt; &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;CDataStream&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SER_NETWORK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PROTOCOL_VERSION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ss&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;76&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;nNonce&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Write the last 4 bytes of the block header (the nonce) to a copy of&lt;/span&gt;
        &lt;span class="c1"&gt;// the double-SHA256 state, and compute the result.&lt;/span&gt;
        &lt;span class="n"&gt;CHash256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hasher&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nNonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Finalize&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;phash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Return the nonce if the hash has at least some zero bits,&lt;/span&gt;
        &lt;span class="c1"&gt;// caller will check if it has enough to reach the target&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;phash&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// If nothing found after trying for a while, return -1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;nNonce&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xfff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/bitcoin/bitcoin/blob/master/src/miner.cpp#L438"&gt;BitcoinMiner&lt;/a&gt;: (excerpted, most error checking code removed)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;BitcoinMiner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CWallet&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pwallet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SetThreadPriority&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;THREAD_PRIORITY_LOWEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;CReserveKey&lt;/span&gt; &lt;span class="n"&gt;reservekey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pwallet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nExtraNonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Create new block&lt;/span&gt;
            &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nTransactionsUpdatedLast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mempool&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTransactionsUpdated&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;CBlockIndex&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pindexPrev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chainActive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tip&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;auto_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CBlockTemplate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pblocktemplate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CreateNewBlockWithKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reservekey&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;CBlock&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pblocktemplate&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;IncrementExtraNonce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pindexPrev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nExtraNonce&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="kt"&gt;int64_t&lt;/span&gt; &lt;span class="n"&gt;nStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;arith_uint256&lt;/span&gt; &lt;span class="n"&gt;hashTarget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arith_uint256&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;SetCompact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nBits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;nNonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Check if something found&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScanHash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nNonce&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UintToArith256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;hashTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;// Found a solution&lt;/span&gt;
                        &lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nNonce&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nNonce&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;GetHash&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

                        &lt;span class="n"&gt;SetThreadPriority&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;THREAD_PRIORITY_NORMAL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;LogPrintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;proof-of-work found  &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;  hash: %s  &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;target: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHex&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;hashTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHex&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                        &lt;span class="n"&gt;ProcessBlockFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pwallet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reservekey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;SetThreadPriority&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;THREAD_PRIORITY_LOWEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nNonce&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffff0000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="c1"&gt;// ... other breaking conditions elided&lt;/span&gt;
                &lt;span class="c1"&gt;// Update nTime every few seconds&lt;/span&gt;
                &lt;span class="n"&gt;UpdateTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pblock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pindexPrev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;boost&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread_interrupted&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;LogPrintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BitcoinMiner terminated&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;throw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Extra Office Hours</title><link href="http://bitcoin-class.org/extra-office-hours.html" rel="alternate"></link><updated>2015-01-29T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-29:extra-office-hours.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Alex Kuck&lt;/strong&gt; has offered to hold some extra office hours this evening
  to help out on Project 1.  You'll find him in the Rice Hall common
  area (the space next to the bagel shop) today, 5-7pm.&lt;/p&gt;</summary></entry><entry><title>Class 5: DigiCash</title><link href="http://bitcoin-class.org/class-5-digicash.html" rel="alternate"></link><updated>2015-01-28T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-28:class-5-digicash.html</id><summary type="html">&lt;p&gt;&lt;div class="phighlight"&gt;
   &lt;a href="http://bitcoin-class.org/classes/class5/class5.pdf"&gt;PDF version for printing&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;p&gt;&lt;div class="todo"&gt;
&lt;a href="http://bitcoin-class.org/pages/project1.html"&gt;Project 1&lt;/a&gt; is due &lt;strong&gt;Friday, 30 January&lt;/strong&gt; (11:59pm).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Upcoming office hours:&lt;/strong&gt;  Thursday 4-5pm (Dave, Rice 507); Friday (Nick, noon-2pm in Hackcville).
   &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt; 
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/44010587" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;br&gt;
&lt;div class="caption"&gt;Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  &lt;br&gt;If you download the slides, they are present though.
Hopefully, the player will be fixed someday. &lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Cryptographic Hash Functions&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;cryptographic hash function&lt;/em&gt;, &lt;span class="math"&gt;&lt;em&gt;H&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt;, must satisfy these two properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;one-way&lt;/strong&gt; (preimage resistance): given &lt;span class="math"&gt;&lt;em&gt;h&lt;/em&gt;= &lt;em&gt;H&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;)&lt;/span&gt; it is hard to find preimage &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strong collision-resistance&lt;/strong&gt;: hard to find any pair &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt; and &lt;span class="math"&gt;&lt;em&gt;y&lt;/em&gt;&lt;/span&gt; where &lt;span class="math"&gt;&lt;em&gt;H&lt;/em&gt;(&lt;em&gt;x&lt;/em&gt;) = &lt;em&gt;H&lt;/em&gt;(&lt;em&gt;y&lt;/em&gt;)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we use SHA-256 for &lt;span class="math"&gt;&lt;em&gt;H&lt;/em&gt;&lt;/span&gt;, how many 258-bit
messages would be expected to hash to a given value &lt;span
class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;Signing Message Digests&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Sign:&lt;/strong&gt; Sign(&lt;span class="math"&gt;m&lt;/span&gt;) = &lt;span class="math"&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;KR&lt;/em&gt;&lt;sub&gt;A&lt;/sub&gt;, &lt;em&gt;H&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;))&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Given &lt;span class="math"&gt;&lt;em&gt;KU&lt;/em&gt;&lt;sub&gt;A&lt;/sub&gt;&lt;/span&gt;, &lt;span
class="math"&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;, and &lt;span class="math"&gt;&lt;em&gt;S&lt;/em&gt;&lt;/span&gt;, how does Bob
verify that &lt;span class="math"&gt;&lt;em&gt;S&lt;/em&gt;&lt;/span&gt; is a valid signature from
Alice for &lt;span class="math"&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;?&lt;/p&gt;
&lt;div class="gap"&gt;

&lt;/div&gt;

&lt;p&gt;A bitcoin address for public key &lt;em&gt;K&lt;/em&gt; is RIPEMD160(SHA256(&lt;em&gt;K&lt;/em&gt;)) where both
RIPEMD160 and SHA256 are cryptographic hash functions.  &lt;/p&gt;
&lt;p&gt;Is this more or less secure than just using &lt;em&gt;K&lt;/em&gt;?&lt;br /&gt;
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Suppose someone finds a way to find collisions for RIPEMD160.  How
serious of a risk would this pose to bitcoin?&lt;br /&gt;
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Suppose someone finds a way to find preimages for RIPEMD160.  How
serious of a risk would this pose to bitcoin?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;Untraceable Electronic Cash&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.fdic.gov/bank/individual/failed/hightrust.html"&gt;High Trust Bank&lt;/a&gt; must be trusty!&lt;/p&gt;
&lt;p&gt;David Chaum, Amos Fiat, and Moni Naor.  &lt;a href="http://bitcoin-class.org/classes/class5/ecash.pdf"&gt;&lt;em&gt;Untraceable Electronic
Cash&lt;/em&gt;&lt;/a&gt;.  CRYPTO 1988.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple RSA Signatures&lt;/strong&gt;&lt;br /&gt;
Public Key = &lt;span class="math"&gt;(&lt;em&gt;e&lt;/em&gt;, &lt;em&gt;n&lt;/em&gt;)&lt;/span&gt;
Private Key = &lt;span class="math"&gt;&lt;em&gt;d&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Identity: &lt;span class="math"&gt;&lt;em&gt;M&lt;/em&gt;&lt;sup&gt;&lt;em&gt;de&lt;/em&gt;&lt;/sup&gt; = &lt;em&gt;M&lt;/em&gt; mod &lt;em&gt;n&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;Sign(&lt;em&gt;m&lt;/em&gt;) = &lt;em&gt;m&lt;/em&gt;&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;n&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Blind Signatures&lt;/strong&gt;
Alice picks random &lt;span class="math"&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt; in &lt;span class="math"&gt;[1, &lt;em&gt;n&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;&lt;em&gt;t&lt;/em&gt; = &lt;em&gt;mk&lt;/em&gt;&lt;sup&gt;&lt;em&gt;e&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;n&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;
Sends &lt;span class="math"&gt;&lt;em&gt;t&lt;/em&gt;&lt;/span&gt; to signer.&lt;/p&gt;
&lt;p&gt;Signer returns &lt;span class="math"&gt;&lt;em&gt;t&lt;/em&gt;&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Signer returns &lt;span class="math"&gt;&lt;em&gt;t&lt;/em&gt;&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sup&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;&lt;em&gt;t&lt;/em&gt;&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sup&gt; = (&lt;em&gt;mk&lt;/em&gt;&lt;sup&gt;&lt;em&gt;e&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;n&lt;/em&gt;)&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;n&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span class="math"&gt;= &lt;em&gt;m&lt;/em&gt;&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sup&gt;&lt;em&gt;k&lt;/em&gt;&lt;sup&gt;&lt;em&gt;ed&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;n&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span class="math"&gt;= &lt;em&gt;m&lt;/em&gt;&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sup&gt;&lt;em&gt;k&lt;/em&gt; mod &lt;em&gt;n&lt;/em&gt;&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Dividing by &lt;span class="math"&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt; gives &lt;span class="math"&gt;Sign(&lt;em&gt;m&lt;/em&gt;) = &lt;em&gt;m&lt;/em&gt;&lt;sup&gt;&lt;em&gt;d&lt;/em&gt;&lt;/sup&gt; mod &lt;em&gt;n&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;What should a signer know before signing a random-looking string?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Cut-and-Choose&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Suppose Alice sends 256 copies and the Bank checks 255 of them.  What is the probability Alice can cheat without getting caught?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;/div&gt;

&lt;p&gt;What should the maximimum bill size be to prevent cheating?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;/div&gt;

&lt;h3&gt;Identity Strings&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;I&lt;/em&gt; = "alice@alice.org"  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;&lt;em&gt;M&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; = "Bill #[r&lt;sub&gt;i&lt;/sub&gt;] : Bearâ€™s Turns Bank owes the holder of this message $100."&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; + identity strings:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class="math"&gt;&lt;em&gt;I&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; = (&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;I&lt;/em&gt;&lt;sub&gt;1L&lt;/sub&gt;), &lt;em&gt;h&lt;/em&gt;(&lt;em&gt;I&lt;/em&gt;&lt;sub&gt;1R&lt;/sub&gt;)), ..., &lt;em&gt;I&lt;/em&gt;&lt;sub&gt;&lt;em&gt;n&lt;/em&gt;&lt;/sub&gt; = (&lt;em&gt;h&lt;/em&gt;(&lt;em&gt;I&lt;/em&gt;&lt;sub&gt;nL&lt;/sub&gt;), &lt;em&gt;h&lt;/em&gt;(&lt;em&gt;I&lt;/em&gt;&lt;sub&gt;nR&lt;/sub&gt;))&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp; where &lt;span class="math"&gt;&lt;em&gt;h&lt;/em&gt;&lt;/span&gt; is a one-way hash function and each &lt;span class="math"&gt;&lt;em&gt;I&lt;/em&gt;&lt;sub&gt;iL&lt;/sub&gt; &amp;oplus; &lt;em&gt;I&lt;/em&gt;&lt;sub&gt;iR&lt;/sub&gt; = &lt;em&gt;I&lt;/em&gt;&lt;/span&gt; (but &lt;span class="math"&gt;&lt;em&gt;I&lt;/em&gt;&lt;sub&gt;iL&lt;/sub&gt; is choosen randomly).&lt;/p&gt;
&lt;p&gt;To spend a bill, the reciever chooses either L or R for each pair for spender to open.&lt;/p&gt;
&lt;p&gt;What is the probability Alice can spend a bill twice without revealing her identity?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="http://globalcryptonews.com/before-bitcoin-the-rise-and-fall-of-digicash/"&gt;Before Bitcoin: The Rise and Fall of DigiCash&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;By all accounts Chaum was a charismatic leader with an interesting management style, but he refused to compromise his artistic vision in any area against the best advice of his employees. He was suspicious of everyone and 'paranoid' with a habit of suddenly changing his mind without warning. At one time, Microsoft had offered DigiCash $180 million to allow them to preinstall Ecash software on Windows computers and the deal was on the verge of completion, but Chaum suddenly decided that his product was worth more and the deal collapsed. If the deal had gone through, cryptocurrency would now be as ubiquitous as Internet Explorer.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Class 4: Verifiably Random?</title><link href="http://bitcoin-class.org/class-4-verifiably-random.html" rel="alternate"></link><updated>2015-01-26T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-26:class-4-verifiably-random.html</id><summary type="html">&lt;p&gt;&lt;div class="phighlight"&gt;
   &lt;a href="http://bitcoin-class.org/classes/class4/class4.pdf"&gt;PDF version for printing&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;p&gt;&lt;div class="todo"&gt;
&lt;a href="http://bitcoin-class.org/pages/project1.html"&gt;Project 1&lt;/a&gt; is due &lt;strong&gt;Friday, 30 January&lt;/strong&gt; (11:59pm).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scheduled office hours:&lt;/strong&gt;&lt;br /&gt;
Dave: after class Mondays, Thursdays 4-5pm (both in Rice 507)&lt;br /&gt;
Nick: Mondays 5-7pm (in Rice 442), Fridays (noon-2pm in Hackcville, #9 Elliewood Ave)
   &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt; 
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/43918186" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;br&gt;
&lt;div class="caption"&gt;Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  &lt;br&gt;If you download the slides, they are present though.
Hopefully, the player will be fixed someday. &lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Signing with Elliptic Curves&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Elliptic curve discrete logarithm problem:&lt;/strong&gt; given points &lt;span class="math"&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; and &lt;span class="math"&gt;&lt;em&gt;Q&lt;/em&gt;&lt;/span&gt;
  on an elliptic curve, it is hard to find an integer &lt;span class="math"&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt; such that &lt;span class="math"&gt;&lt;em&gt;Q&lt;/em&gt; = &lt;em&gt;kP&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; curve, &lt;em&gt;G&lt;/em&gt; (a point on curve), (large) &lt;em&gt;n&lt;/em&gt; such that &lt;span class="math"&gt;&lt;em&gt;nG&lt;/em&gt; = 0&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key pair:&lt;/strong&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;Private key&lt;/em&gt;: &lt;span class="math"&gt;&lt;em&gt;d&lt;/em&gt;&lt;/span&gt; = pick a random integer in &lt;span class="math"&gt;[1, &lt;em&gt;n&lt;/em&gt;-1]&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;em&gt;Public key&lt;/em&gt;: point on the curve, &lt;span class="math"&gt;&lt;em&gt;Q&lt;/em&gt; = &lt;em&gt;dG&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signing:&lt;/strong&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;pick random integer &lt;span class="math"&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt; in &lt;span class="math"&gt;[1, &lt;em&gt;n&lt;/em&gt;-1]&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;compute curve point: &lt;span class="math"&gt;(&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;) = &lt;em&gt;kG&lt;/em&gt;&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;signature = &lt;span class="math"&gt;(&lt;em&gt;x&lt;/em&gt; mod &lt;em&gt;n&lt;/em&gt;, &lt;em&gt;k&lt;/em&gt;&lt;sup&gt;-1&lt;/sup&gt;(&lt;em&gt;z&lt;/em&gt; + &lt;em&gt;rd&lt;/em&gt;) mod &lt;em&gt;n&lt;/em&gt;)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;What are the reasons for prefering ECC for signatures in bitcoin over RSA-based signature algorithms?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;For an interesting history of improvements in factoring, see Carl
Pomerance, &lt;a href="http://www.ams.org/notices/199612/pomerance.pdf"&gt;&lt;em&gt;A Tale of Two
Sieves&lt;/em&gt;&lt;/a&gt;, Notices of
the AMS, December 1996:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;John Pollard in 1988 circulated a letter to several people outlining an idea of his
for factoring certain big numbers via algebraic number fields. His
original idea was not for any large composite, but for certain "pretty"
composites that had the property that they were close to powers and had
certain other nice properties as well. He illustrated the idea with a
factorization of the number&lt;/em&gt; &lt;span class="math"&gt;2&lt;sup&gt;2&lt;sup&gt;7&lt;/sup&gt;&lt;/sup&gt; + 1&lt;/span&gt;&lt;em&gt;, the seventh Fermat number.
I must admit that at first I was not too keen on Pollard's method, since it seemed to be applicable
to only a few numbers. ... 
But what of general numbers? In the summer of 1989 I was to give a talk at the meeting of the
Canadian Number Theory Association in Vancouver. It was to be a survey talk on factoring,
and I figured it would be a good idea to mention Pollard's new method. On the plane on the way
to the meeting I did a complexity analysis of the method as to how it would work for general
numbers, assuming myriad technical difficulties did not exist and that it was possible to run
it for general numbers. I was astounded. The complexity for this algorithm-that-did-not-yet exist
was of the shape&lt;/em&gt; &lt;span class="math"&gt;exp(&lt;em&gt;c&lt;/em&gt;(log &lt;em&gt;n&lt;/em&gt;)&lt;sup&gt;1/3&lt;/sup&gt; (log log &lt;em&gt;n&lt;/em&gt;)&lt;sup&gt;2/3&lt;/sup&gt;). &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Erich Wenger and Paul Wolfger, &lt;a href="http://eprint.iacr.org/2014/368.pdf"&gt;&lt;em&gt;Solving the Discrete Logarithm of a
113-bit Koblitz Curve with an FPGA
Cluster&lt;/em&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It is possible to repeatedly fold a standard letter-sized sheet of
paper at the midway point about six to seven times. In 2012, some MIT
students were able to fold an 1.2 kilometer long toilet paper 13
times. And every time the paper was folded, the number of layers on
top of each other doubled. Therefore, the MIT students ended up with
213 = 8192 layers of paper on top of each other.  And poor Eveâ€™s job
was to manually count all layers one by one.  Similar principles apply
in cryptography, although bigger numbers are involved.  In Elliptic
Curve Cryptography (ECC), where&lt;/em&gt; &lt;span class="math"&gt;log&lt;sub&gt;2&lt;/sub&gt;
&lt;em&gt;n&lt;/em&gt;&lt;/span&gt;&lt;em&gt;-bit private keys are used, Eve does not have to iterate
through all possible&lt;/em&gt; &lt;span class="math"&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; &lt;em&gt;keys. Instead, Eve
would use the more efficient parallelizable Pollardâ€™s rho algorithm
that finishes in approximately&lt;/em&gt; &lt;span class="math"&gt;sqrt(&lt;em&gt;n&lt;/em&gt;)&lt;/span&gt;
&lt;em&gt;steps. The omnipresent question is how big &lt;/em&gt;&lt;span class="math"&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; &lt;em&gt;has to be such that even
the most powerful adversaries are not able to reconstruct a private
key. Especially in embedded, cost-sensitive applications, it is
important to use keys that are only as large as necessary.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Bitcoin's Curve&lt;/h2&gt;
&lt;p&gt;Standards for Efficient Cryptography: &lt;a href="http://www.secg.org/sec2-v2.pdf"&gt;&lt;em&gt;SEC 2: Recommended Elliptic
Curve Domain Parameters&lt;/em&gt;&lt;/a&gt; (Certicom
Research, 27 January 2010)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Verifiably random parameters offer some additional conservative features. These parameters are
chosen from a seed using SHA-1 as specified in ANSI X9.62 [X9.62]. This process ensures that
the parameters cannot be predetermined. The parameters are therefore extremely unlikely to
be susceptible to future special-purpose attacks, and no trapdoors can have been placed in the
parameters during their generation. When elliptic curve domain parameters are chosen verifiably
at random, the seed S used to generate the parameters may optionally be stored along with the
parameters so that users can verify the parameters were chosen verifiably at random.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What does it mean for parameters to be "verifiably random"?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h1&gt;Randomness&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Kolmogorov Complexity:&lt;/strong&gt; &lt;span class="math"&gt;&lt;em&gt;K&lt;/em&gt;(&lt;em&gt;s&lt;/em&gt;)&lt;/span&gt; = the length of the shortest description of &lt;span class="math"&gt;&lt;em&gt;s&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kolmogorov's Definition of Random:&lt;/strong&gt; A sequence &lt;span
  class="math"&gt;&lt;em&gt;s&lt;/em&gt;&lt;/span&gt; is random, if &lt;span class="math"&gt;&lt;em&gt;K&lt;/em&gt;(&lt;em&gt;s&lt;/em&gt;) =
  |&lt;em&gt;s&lt;/em&gt;| + &lt;em&gt;C&lt;/em&gt;&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;What is the Kolmogorov Complexity of the string &lt;code&gt;0001000010000011111111100111...&lt;/code&gt;?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;/div&gt;

&lt;p&gt;What is the Kolmogorov Complexity of the string: 1MRigEo5423vycLnUdSnA4C6Ts691fUiYu 18UikW89q9VgGDftQW3Gmuhe4sQDCFP5kD 19ZQwQmfAsgy47ErehfkW3SeSzNGFfH9iN 1AZCH1insc6JrT2Z9SiNvgtTugXg8sF8yd 15qYggRJvmyZfpchxvNqr6h3pNjw6bGBV9 1C943NwPPffUFY7VDzi3kt7KikXwc2vdkN 1JBhLLCgNYhR8f6AZcRS3mjfEAmMzPvwyf 1JvDrBSYm6o4ZTQUhwUE4FhPFxd2wuXWUR 1KcBM1RNhcp1oENycoD4AezA5Se4SrsZnA 16JZWC433XRxjWwR7X65uxRVFdLTmoPr4t 149LB8VYaT1BdMLyQUL92Kj6KrJfNwcp64 16zDGuzbwkHjW8dNYMw9stDjRbTzVSLZU1 1HfMaZn53ZDWKgmhWxk1UPZMjQ6QmpW6m 14gZWnuwKpRLTCUFCAgTZMciRaEdrkmEpr 1BZ2ateDPugmqLzYsXVy9EK5BguvXa2Bnj 1rCdRyMVcZHJaHA2LKUvRqYBcHqvAfQkc 1Ak8VwX6x4FPbA6aXTC3BQGQHnnhfaJuB8 129sBvF6Jternwdn5XcoA37LinQRcmAD5U1H2in 1HxEzSKHssPtog2krjFPiPfrKSiw4... ?&lt;/p&gt;
&lt;div class="gap"&gt;

&lt;/div&gt;

&lt;p&gt;Daniel J. Bernstein, Tung Chou, Chitchanok Chuengsatiansup, Andreas
H&amp;uuml;lsing, Tanja Lange, Ruben Niederhagen, and Christine van Vredendaal.
&lt;a href="https://eprint.iacr.org/2014/571.pdf"&gt;&lt;em&gt;How to Manipulate Curve Standards: A White Paper for the Black  Hat&lt;/em&gt;&lt;/a&gt;, 2014.&lt;/p&gt;
&lt;p&gt;How likely is it that the parameters for the secp256k1 curve used by bitcoin have a trapdoor?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;How should ECC parameters be generated for an important curve in a standard?
&lt;div class="gap"&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="http://www.root-dnssec.org/wp-content/uploads/2010/02/draft-icann-dnssec-ceremonies-00.txt"&gt;&lt;em&gt;Root Zone DNSSEC KSK Ceremonies
Guide&lt;/em&gt;&lt;/a&gt;.
If you have a few hours to spare, you can watch a key signing for the
DNSSEC (Domain Name System): &lt;a href="https://www.iana.org/dnssec/ceremonies/20"&gt;DNSSEC KSK Ceremony
20&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Dual-EC PRNG&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf"&gt;NIST Special Publication 800-90A Recommendation for Random Number
Generation Using Deterministic Random Bit
Generators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; and &lt;span class="math"&gt;&lt;em&gt;Q&lt;/em&gt;&lt;/span&gt; are points on the curve, specified by the standard (but not
explained how &lt;span class="math"&gt;&lt;em&gt;Q&lt;/em&gt;&lt;/span&gt; is choosen).  &lt;span class="math"&gt;&lt;em&gt;P&lt;/em&gt;&lt;/span&gt; is a generator, so there exists some
&lt;span class="math"&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt; such that &lt;span class="math"&gt;&lt;em&gt;Q&lt;/em&gt;&lt;sup&gt;&lt;em&gt;e&lt;/em&gt;&lt;/sup&gt; = &lt;em&gt;P&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;0&lt;/sub&gt; = &lt;/span&gt; initialize with seed randomness&lt;br /&gt;
&lt;span class="math"&gt;&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;+1&lt;/sub&gt; = &amp;phiv;(&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; &amp;times; &lt;em&gt;P&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; = &amp;phiv;(&lt;em&gt;s&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; &amp;times; &lt;em&gt;Q&lt;/em&gt;)&lt;/span&gt;&lt;br /&gt;
&lt;span class="math"&gt;&lt;em&gt;o&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt; =&lt;/span&gt; the low-order 16 bits of the &lt;span class="math"&gt;&lt;em&gt;x&lt;/em&gt;&lt;/span&gt;-coordinate of &lt;span class="math"&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Given &lt;span class="math"&gt;&lt;em&gt;o&lt;/em&gt;&lt;sub&gt;i&lt;/sub&gt;&lt;/span&gt;, how much work is it to find all the possible &lt;span class="math"&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;i&lt;/sub&gt; = (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;)&lt;/span&gt; values?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Given &lt;span class="math"&gt;&lt;em&gt;e&lt;/em&gt;&lt;/span&gt;, what is &lt;span class="math"&gt;&amp;phiv;(&lt;em&gt;e&lt;/em&gt; &amp;times; &lt;em&gt;A&lt;/em&gt;)&lt;/span&gt; where &lt;span class="math"&gt;&lt;em&gt;A&lt;/em&gt;&lt;/span&gt; is a possible &lt;span class="math"&gt;&lt;em&gt;r&lt;/em&gt;&lt;sub&gt;&lt;em&gt;i&lt;/em&gt;&lt;/sub&gt;&lt;/span&gt; value?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Dan Shumow, Niels Ferguson.  &lt;a href="http://rump2007.cr.yp.to/15-shumow.pdf"&gt;&lt;em&gt;On the Possibility of a Back Door in the
NIST SP800-90 Dual Ec Prng&lt;/em&gt;&lt;/a&gt;.
CRYPTO 2007 Rump Session.&lt;/p&gt;
&lt;p&gt;Michael Wertheimer (NSA), &lt;a href="http://www.ams.org/notices/201502/rnoti-p165.pdf"&gt;&lt;em&gt;Encryption and the NSA Role in International
Standards&lt;/em&gt;&lt;/a&gt;, Notices
of the American Mathematical Society, February 2015.&lt;/p&gt;
&lt;p&gt;Wertheimer's letter is an attempt to respond to &lt;a href="http://www.ams.org/notices/201406/rnoti-p623.pdf"&gt;&lt;em&gt;Mathematicians Discuss the
Snowden Revelations&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The recent revelations about the NSAâ€™s spying
programs are both dismaying and encouraging.
What is encouraging is that they might lead not
just to a reform of the intelligence agencies but
also to a more serious look at what the ongoing
and inevitable erosion of privacy is doing to our
society. What is dismaying is less the intrusive data
collection itself and more what it reveals about the
decision-making processes inside the government.&lt;/em&gt; (Andrew Odlyzko)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How satisfying is the NSA's response?  Are you more dismayed or encouraged?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;</summary></entry><entry><title>Office Hours</title><link href="http://bitcoin-class.org/office-hours.html" rel="alternate"></link><updated>2015-01-24T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-24:office-hours.html</id><summary type="html">&lt;p&gt;Here's the office hours schedule, starting this week:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Evans&lt;/strong&gt;:&lt;br /&gt;
Mondays right after class.&lt;br /&gt;
Thursdays, 4-5pm in Rice 507.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nick Skelsey&lt;/strong&gt;:&lt;br /&gt;
Monday nights from 5-7pm in Rice 442 (Dave's lab).&lt;br /&gt;
Fridays from 12-2pm at &lt;a href="http://hackcville.com"&gt;Hackcville&lt;/a&gt; (#9 Elliewood Ave).&lt;/p&gt;
&lt;p&gt;Note that you can see these, as well as other events in the class in the
&lt;a href="https://www.google.com/calendar/embed?src=rmjagdrnmu3a9h2q5199lg4t28%40group.calendar.google.com&amp;amp;ctz=America/New_York"&gt;course
calendar&lt;/a&gt;
(which you should be able to embed in your own calendar).  When we need
to canel or reschedule office hours, it will be updated on the course
calendar.  &lt;/p&gt;</summary></entry><entry><title>Communication in Cryptocurrency Cafe</title><link href="http://bitcoin-class.org/communication-in-cryptocurrency-cafe.html" rel="alternate"></link><updated>2015-01-23T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-23:communication-in-cryptocurrency-cafe.html</id><summary type="html">&lt;p&gt;Here's some information on how communication will be done for this course.&lt;/p&gt;
&lt;p&gt;I prefer to avoid using email for group communication, so won't be email
spamming the entire class except when it really seems necessary.
Instead, nearly all (electronic) communication will be done through the
course website.&lt;/p&gt;
&lt;p&gt;You can subscribe to the site using an RSS reader, or receive an email
notification everytime the site is updated by using a service like
&lt;a href="https://blogtrottr.com/"&gt;https://blogtrottr.com/&lt;/a&gt; and subscribing to
&lt;code&gt;bitcoin-class.org&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Many of the pages on the course site will include a disqus discussion
forum.  If you don't already have an account with disqus, you can create
one the first time you post a comment (or sign-on to disqus using a
Google, Facebook, or Twitter account, if you don't mind you disqus
activities being visible to another provider).  You can also post
anonymously and should use this when you feel it is necessary, but
otherwise, please post using a name that will be recognizable to me and
your classmates.&lt;/p&gt;
&lt;p&gt;I don't want to force pseudo-discussion by making it a course
requirement to make a certain number of contributions to the on-line
discussions, but do encourage everyone to use the fora to contribute to
both your own learning and building the course community, and to provide
value to others in the class.&lt;/p&gt;
&lt;p&gt;In addition to the page-specific disqus comments, you can use the
&lt;a href="http://bitcoin-class.org/pages/forum.html"&gt;general forum&lt;/a&gt; for discussions that don't
fit into particular topics.  Feel free to use that forum to post links
and thoughts about any related information you find, as well as general
comments broadly relevant to the course.&lt;/p&gt;
&lt;p&gt;You can control settings in disqus to determine when you receive email
notifications (including subscribing to notifications for any comments
on the course site if you want, or getting a daily or weekly digest).&lt;/p&gt;
&lt;p&gt;If you have a non-confidential question about a course assignment or
content, please use the web site forums to ask it instead of emailing me
directly.  This way, I (or others) can respond in a way that will be
visible to everyone else who might have the same question.  Feel free to
use email to contact me directly for questions that are private or not
relevant to the rest of the class.&lt;/p&gt;</summary></entry><entry><title>Key Chase</title><link href="http://bitcoin-class.org/key-chase.html" rel="alternate"></link><updated>2015-01-22T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-22:key-chase.html</id><summary type="html">&lt;p&gt;As mentioned in class today, each of you should have received a small
deposit in your wallet.  You will need this for Project 1, but should
also use it as a starting point for attempting to learn as much as you
can about how we transfered funds (and possibly solve the puzzle leading
to something interesting).  You can try tracing the transaction both
forward and backward, trying to learn things like: where did the initial
coin come from and when did I buy it, how long did it take for all the
coin to be distributed, how much did it cost in transaction fees, etc.&lt;/p&gt;
&lt;p&gt;Note that each of you had a different bitcoin address, so you all have
different starting points for examining the transactions.&lt;/p&gt;
&lt;p&gt;Post interesting things you find about this in the discussion below.
(Note: the discussion won't appear on the main index page.  Click on the
title link to enter the article page that will include the discussion.)&lt;/p&gt;</summary></entry><entry><title>Class 3: Elliptic Curves</title><link href="http://bitcoin-class.org/class-3-elliptic-curves.html" rel="alternate"></link><updated>2015-01-21T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-21:class-3-elliptic-curves.html</id><summary type="html">&lt;p&gt;&lt;div class="phighlight"&gt;
   &lt;a href="http://bitcoin-class.org/classes/class3/class3.pdf"&gt;PDF version for printing&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;p&gt;&lt;div class="todo"&gt;
&lt;a href="http://bitcoin-class.org/pages/project1.html"&gt;Project 1&lt;/a&gt; is due &lt;strong&gt;Friday, 30 January&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Before the next class (Monday, Jan 26): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; Satoshi Nakamoto, &lt;a href="https://bitcoin.org/bitcoin.pdf"&gt;&lt;em&gt;Bitcoin: A Peer-to-Peer Electronic Cash
System&lt;/em&gt;&lt;/a&gt;, 2008.  The is the original
bitcoin paper, which is quite readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; &lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch05.asciidoc"&gt;&lt;em&gt;Chapter 5:
    Transactions&lt;/em&gt;&lt;/a&gt;
    from Andreas Antonopoulos' book.
   &lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt; 
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/43761680" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;&lt;br&gt;
&lt;div class="caption"&gt;Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  &lt;br&gt;If you download the slides, they are present though.
Hopefully, the player will be fixed someday. &lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Asymmetric Cryptosystems Recap&lt;/h3&gt;
&lt;p&gt;For asymmetric cryptography, we need a one-way function with a trapdoor:
a function that can be easily inverted given a secret key, but is hard
to invert without knowledge of that key.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signatures:&lt;/strong&gt; Signer encrypts a message with her own private key.
  Verifier checks the message using the signer's public key.&lt;/p&gt;
&lt;h2&gt;Elliptic Curve Cryptography&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Elliptic curve:&lt;/strong&gt; points satisfying an equation like &lt;span
class="math"&gt;&lt;em&gt;y&lt;/em&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;em&gt;x&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; + 7&lt;/span&gt; (this is the curve
used in bitcoin).&lt;/p&gt;
&lt;p&gt;For real numbers, this is &lt;a href="http://www.wolframalpha.com/input/?i=y%5E2+%3D+x%5E3+%2B+7"&gt;easy to solve&lt;/a&gt;:
&lt;span class="math"&gt;&lt;em&gt;y&lt;/em&gt; = sqrt(&lt;em&gt;x&lt;/em&gt;&lt;sup&gt;3&lt;/sup&gt; + 7)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In a finite field, it is complex enough to form the basis of cryptographic operations.&lt;/p&gt;
&lt;h2&gt;Crash Course in Group Theory&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Group:&lt;/strong&gt; A group is a set, &lt;span class="math"&gt;&lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, on which the operation &lt;span class="math"&gt;&amp;oplus;&lt;/span&gt; is defined with the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Closure&lt;/em&gt;: for all &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt; &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt; &amp;oplus; &lt;em&gt;b&lt;/em&gt; &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Associative&lt;/em&gt;: for all &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt; &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;(&lt;em&gt;a&lt;/em&gt; &amp;oplus; &lt;em&gt;b&lt;/em&gt;) &amp;oplus; &lt;em&gt;c&lt;/em&gt; = &lt;em&gt;a&lt;/em&gt; &amp;oplus; (&lt;em&gt;b&lt;/em&gt; &amp;oplus; &lt;em&gt;c&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Identity&lt;/em&gt;: there is some element, &lt;span class="math"&gt;&lt;b&gt;0&lt;/b&gt; &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, such that for all &lt;span class="math"&gt;a &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt; &amp;oplus; &lt;b&gt;0&lt;/b&gt; = &lt;b&gt;0&lt;/b&gt; &amp;oplus; &lt;em&gt;a&lt;/em&gt; = &lt;em&gt;a&lt;/em&gt;&lt;span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Inverse&lt;/em&gt;: for all &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt; &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, there exists an inverse, &lt;span class="math"&gt;-&lt;em&gt;a&lt;/em&gt; &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, such that &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt; &amp;oplus; (-&lt;em&gt;a&lt;/em&gt;) = &lt;b&gt;0&lt;/b&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Abelian Group:&lt;/strong&gt; An abelian (or commutative) group has this additional property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Commutative&lt;/em&gt;: for all &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt; &amp;isin; &lt;em&gt;G&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt; &amp;oplus; &lt;em&gt;b&lt;/em&gt; = &lt;em&gt;b&lt;/em&gt; &amp;oplus; &lt;em&gt;a&lt;/em&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are the integers and addition an abelian group?
&lt;div class="gap"&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Are the whole numbers and addition an abelian group?
&lt;div class="gap"&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finite Field:&lt;/strong&gt; A finite field is a set &lt;span class="math"&gt;&lt;em&gt;F&lt;/em&gt;&lt;/span&gt; of &lt;span class="math"&gt;&lt;em&gt;N&lt;/em&gt; &amp;ge; 2&lt;/span&gt; elements on which the operators &lt;span class="math"&gt;&amp;oplus;&lt;/span&gt; and &lt;span class="math"&gt;&amp;times;&lt;/span&gt; are defined with these properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;&lt;em&gt;F&lt;/em&gt;&lt;/span&gt; is an &lt;em&gt;abelian group&lt;/em&gt; with identity &lt;span class="math"&gt;&lt;b&gt;0&lt;/b&gt;&lt;/span&gt; under the &lt;span class="math"&gt;&amp;oplus;&lt;/span&gt; operation.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The set &lt;span class="math"&gt;&lt;em&gt;F&lt;/em&gt; - { 0 }&lt;/span&gt; is an &lt;em&gt;abelian group&lt;/em&gt; with identity &lt;span class="math"&gt;&lt;b&gt;1&lt;/b&gt;&lt;/span&gt; under the &lt;span class="math"&gt;&amp;times;&lt;/span&gt; operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Distributive: For all &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt; &amp;isin; &lt;em&gt;F&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;(&lt;em&gt;a&lt;/em&gt; &amp;oplus; &lt;em&gt;b&lt;/em&gt;) &amp;times; &lt;em&gt;c&lt;/em&gt; = (&lt;em&gt;a&lt;/em&gt; &amp;times; &lt;em&gt;c&lt;/em&gt;) &amp;oplus; (&lt;em&gt;b&lt;/em&gt; &amp;times; &lt;em&gt;c&lt;/em&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(Note that this requires for all &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;&lt;em&gt;a&lt;/em&gt; &amp;times; &lt;b&gt;0&lt;/b&gt; = &lt;b&gt;0&lt;/b&gt;&lt;/span&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prime Field Theorem:&lt;/strong&gt; For every prime number &lt;span
  class="math"&gt;&lt;em&gt;p&lt;/em&gt;&lt;/span&gt;, the set &lt;span class="math"&gt;{ 0, 1, &amp;hellip;, &lt;em&gt;p&lt;/em&gt;
  - 1 }&lt;/span&gt; forms a finite field with the operations addition and
  multiplication modulo &lt;span class="math"&gt;p&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Demonstrate that &lt;span class="math"&gt;&lt;em&gt;F&lt;/em&gt;&lt;sub&gt;3&lt;/sub&gt;&lt;/span&gt; is a finite field.
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;See &lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-451-principles-of-digital-communication-ii-spring-2005/lecture-notes/chap7.pdf"&gt;&lt;em&gt;Introduction to Finite
Fields&lt;/em&gt;&lt;/a&gt;
(notes from David Forney's &lt;a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-451-principles-of-digital-communication-ii-spring-2005/index.htm"&gt;MIT 6.451
course&lt;/a&gt;)
for a proof that all prime fields, &lt;span
class="math"&gt;F&lt;sub&gt;p&lt;/sub&gt;&lt;/span&gt; are finite fields, and more thorough
introduction to finite fields.&lt;/p&gt;
&lt;h2&gt;Operations on Elliptic Curves&lt;/h2&gt;
&lt;p&gt;"Addition" on an elliptic curve is done by finding the a point on the
line between the two inputs points, and reflecting that point over the
x-axis.&lt;/p&gt;
&lt;p&gt;Here's what this looks like for real numbers (but don't be mislead
&amp;mdash; elliptic curves over finite fields do not look anything like
these simple curves):&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
   &lt;img src="http://media.coindesk.com/2014/10/point-addition.png"&gt;&lt;br&gt;
Image source: Eric Rykwalder, &lt;a href="http://www.coindesk.com/math-behind-bitcoin/"&gt;&lt;em&gt;The Math Behind Bitcoin&lt;/em&gt;&lt;/a&gt;.
   &lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;&lt;em&gt;P&lt;/em&gt; + &lt;em&gt;Q&lt;/em&gt; = &lt;em&gt;R&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Doing addition on elliptic curves over finite fields is more complex,
and there has been a lot of research into how to do these operations
efficiently.  See the
&lt;a href="https://github.com/btcsuite/btcec/blob/master/btcec.go#L431"&gt;btcec.Add&lt;/a&gt;
code for how it is done in the library.&lt;/p&gt;
&lt;p&gt;Doubling (e.g., &lt;span class="math"&gt;&lt;em&gt;P&lt;/em&gt; + &lt;em&gt;P&lt;/em&gt; = &lt;em&gt;R&lt;/em&gt;&lt;/span&gt;) is the same idea,
except instead of finding the intersection of the line formed by the two
addends (which doesn't exist for the single point), finds the
intersection between the tangent of the curve.&lt;/p&gt;
&lt;p&gt;"Multiplication" is just repeated addition: &lt;span class="math"&gt;&lt;em&gt;kP&lt;/em&gt; = &lt;em&gt;P&lt;/em&gt; +
&lt;em&gt;P&lt;/em&gt; + ... + &lt;em&gt;P&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Is there a more efficient way to compute &lt;span class="math"&gt;9_P_&lt;/span&gt; than using 8 additions?&lt;br /&gt;
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;</summary></entry><entry><title>Class 2: Cryptography</title><link href="http://bitcoin-class.org/class-2-cryptography.html" rel="alternate"></link><updated>2015-01-14T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-14:class-2-cryptography.html</id><summary type="html">&lt;p&gt;&lt;div class="phighlight"&gt;
   &lt;a href="http://bitcoin-class.org/classes/class2/class2.pdf"&gt;PDF version for printing&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;p&gt;&lt;div class="todo"&gt;
Before the next class (Wednesday, Jan 21):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; 
&lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch03.asciidoc"&gt;&lt;em&gt;Chapter 3: The Bitcoin Client&lt;/em&gt;&lt;/a&gt;
and
&lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch04.asciidoc"&gt;&lt;em&gt;Chapter 4: Keys, Addresses, Wallets&lt;/em&gt;&lt;/a&gt;
from Andreas M. Antonopoulos, &lt;a href="https://github.com/aantonop/bitcoinbook"&gt;&lt;em&gt;Mastering Bitcoin: Unlocking Digital
Cryptocurrencies&lt;/em&gt;&lt;/a&gt; book (also
available &lt;a href="http://www.amazon.com/Mastering-Bitcoin-Unlocking-Digital-Crypto-Currencies/dp/1449374042"&gt;in
print&lt;/a&gt;).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pay attention to your email.  &lt;strike&gt;You should receive an email by Sunday,
and it will include some other things to do before Wednesday's class.&lt;/strike&gt; [Change in plans: I haven't sent out the email yet.  I expect to do this Tuesday, and there will not be anything new due on Wednesday. Sorry for the delay!]
   &lt;/div&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;center&gt; &lt;iframe
src="//www.slideshare.net/slideshow/embed_code/43552674" width="476"
height="400" frameborder="0" marginwidth="0" marginheight="0"
scrolling="no"&gt;&lt;/iframe&gt;&lt;br&gt; 
&lt;div class="caption"&gt; Note: due to a bug in
slideshare's updated player, ink markings no longer appear in the
viewer.  &lt;br&gt;If you download the slides, they are present though.
Hopefully, the player will be fixed someday.  &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;!--
how is it possible to own something digital?

- copyright!

England

1662 - Licensing of the Press Act

guild of printers, "Stationer's Company" (formed in 1403, royal charter in 1557)
granted monopoly on printing [cf. Chinese granting monopoly on salt production]
exclusive right to print - responsible for censoring

ended in 1694 - no restrictions        


Act of Queen Anne
--&gt;

&lt;h2&gt;Cryptography&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;kryptos&lt;/em&gt; is a Greek root meaning hidden ("secret")&lt;/p&gt;
&lt;p&gt;&lt;em&gt;crypto&lt;/em&gt; + &lt;em&gt;graphy&lt;/em&gt; = "secret writing"&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Decryption&lt;/em&gt; is what the intended receiver does.&lt;br /&gt;
&lt;em&gt;Cryptanalysis&lt;/em&gt; is what an attacker does.  &lt;/p&gt;
&lt;p&gt;How are cryptography and security related?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;Simple Message Cryptosystem&lt;/h3&gt;
&lt;p&gt;Two functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encrypt:&lt;/strong&gt; &lt;span class="math"&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.  The input is called the
    &lt;strong&gt;plaintext&lt;/strong&gt;; the output is called the &lt;strong&gt;ciphertext&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decrypt:&lt;/strong&gt; &lt;span class="math"&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;c&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Required properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; for all possible messages, &lt;span class="math"&gt;&lt;em&gt;m&lt;/em&gt;, &lt;em&gt;D&lt;/em&gt;(&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;)) = &lt;em&gt;m&lt;/em&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; given the output of &lt;span class="math"&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;m&lt;/em&gt;)&lt;/span&gt;, it is "hard" to learn anything interesting about &lt;span class="math"&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://web.mit.edu/newsoffice/2013/goldwasser-and-micali-win-turing-award-0313.html"&gt;&lt;em&gt;Goldwasser and Micali win Turing Award: Team honored for
â€˜revolutionizing the science of
cryptography'&lt;/em&gt;&lt;/a&gt;,
MIT News, 13 March 2013. &lt;/p&gt;
&lt;p&gt;Their paper that introduced semantic security notions is:
&lt;a href="http://groups.csail.mit.edu/cis/pubs/shafi/1982-stoc.pdf"&gt;&lt;em&gt;Probabilistic Encryption and How to Play Mental Poker Keeping Secret
All Partial
Information&lt;/em&gt;&lt;/a&gt;,
ACM Symposium on Theory of Computing, 1982.  (We will not get into
formal security definitions or proofs in this class, but you should take
&lt;a href="http://www.cs.virginia.edu/~mohammad/"&gt;Mohammad Mahmoody&lt;/a&gt;'s class to
learn them.)&lt;/p&gt;
&lt;h3&gt;Keyed Symmetric Cryptosystem&lt;/h3&gt;
&lt;p&gt;Claude Shannon, &lt;a href="http://netlab.cs.ucla.edu/wiki/files/shannon1949.pdf"&gt;&lt;em&gt;Communication Theory of Secrecy Systems&lt;/em&gt;&lt;/a&gt;, 1949 (work done during World War II, but declassified later).&lt;/p&gt;
&lt;p&gt;Two functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encrypt:&lt;/strong&gt; &lt;span class="math"&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;&lt;font color="red"&gt;k&lt;/font&gt;&lt;/em&gt;: byte[], &lt;em&gt;m&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decrypt:&lt;/strong&gt; &lt;span class="math"&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;&lt;font color="red"&gt;k&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Required properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Correctness:&lt;/strong&gt; for all possible messages, &lt;span class="math"&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt;, and keys, &lt;span class="math"&gt;&lt;em&gt;k&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;&lt;font color="red"&gt;k&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;(&lt;em&gt;&lt;font color="red"&gt;k&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;)) = &lt;em&gt;m&lt;/em&gt;&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; given &lt;span class="math"&gt;&lt;em&gt;E&lt;/em&gt;&lt;/span&gt;, &lt;span class="math"&gt;&lt;em&gt;D&lt;/em&gt;&lt;/span&gt;, and the output of &lt;span class="math"&gt;&lt;em&gt;E&lt;/em&gt;(&lt;font color="red"&gt;&lt;em&gt;k&lt;/em&gt;&lt;/font&gt;, &lt;em&gt;m&lt;/em&gt;)&lt;/span&gt; it is "hard" to learn anything interesting about &lt;span class="math"&gt;&lt;em&gt;m&lt;/em&gt;&lt;/span&gt; (without knowing &lt;span class="math"&gt;&lt;font color="red"&gt;&lt;em&gt;k&lt;/em&gt;&lt;/font&gt;&lt;/span&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are these properties enough to be secure against an active attacker?
&lt;div class="gap"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;Jefferson's Wheel Cipher&lt;/h3&gt;
&lt;p&gt;There are, of course, better ways to break a message encrypted using
Jefferson's Wheel cipher than just trying all possible keys as in a
brute force attack.  Here's how Geoff Stoker solved it: &lt;a href="http://www.cs.virginia.edu/~evans/cs588-fall2001/challenges/wheel-solved.html"&gt;&lt;em&gt;Jefferson
Wheel Challenge
solved!&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keyspace:&lt;/strong&gt; the set of all possible keys.  Assume (hopefully for
  user!) that key is drawn randomly from this set.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brute Force Attack:&lt;/strong&gt; try for all possible keys, &lt;span
  class="math"&gt;&lt;em&gt;k&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;&lt;/span&gt;, computing &lt;span
  class="math"&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;k&lt;/em&gt;&lt;sub&gt;i&lt;/sub&gt;)&lt;/span&gt; and see if it looks like a
  reasonable plaintext.  &lt;/p&gt;
&lt;p&gt;In order for a brute force attack to succeed, what properties are
necessary about (1) the keyspace and (2) the message space?&lt;/p&gt;
&lt;div class="gap"&gt;

&lt;/div&gt;

&lt;h3&gt;Asymmetric Cryptosystems&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Asymmetric cryptosystems&lt;/strong&gt; use &lt;em&gt;different functions&lt;/em&gt; for encrypting
  and decrypting, with the property that revealing the encryption
  function does not reveal the decryption function.  With Kerckhoff's
  Principle, this means there are different keys for encryption and
  decryption.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Generate:&lt;/strong&gt; produce key pair, &lt;span class="math"&gt;(&lt;em&gt;&lt;font color="green"&gt;KU&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;, &lt;em&gt;&lt;font color="red"&gt;KR&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;)&lt;/span&gt;, and publish the public key, &lt;span class="math"&gt;&lt;em&gt;&lt;font color="green"&gt;KU&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Encrypt:&lt;/strong&gt; &lt;span class="math"&gt;&lt;em&gt;E&lt;/em&gt;(&lt;em&gt;&lt;font color="green"&gt;KU&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;&lt;/em&gt;: byte[], &lt;em&gt;m&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decrypt:&lt;/strong&gt; &lt;span class="math"&gt;&lt;em&gt;D&lt;/em&gt;(&lt;em&gt;&lt;font color="red"&gt;KR&lt;sub&gt;X&lt;/sub&gt;&lt;/font&gt;, _c&lt;/em&gt;: byte[]) &amp;rarr; byte[]&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Messages:&lt;/strong&gt; Sender encrypts a message with the recipient's public key.
  Recipient decrypts the message using her private key.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signatures:&lt;/strong&gt; Signer encrypts a message with her own private key.
  Verifier checks the message using the signer's public key.&lt;/p&gt;
&lt;p&gt;How can we use asymmetric cryptosystems to &lt;em&gt;prove&lt;/em&gt; ownership?
&lt;div class="gap"&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;How can we use asymmetric cryptosystems to &lt;em&gt;transfer&lt;/em&gt; ownership?
&lt;div class="gap"&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Assuming we have a strong asymmetric cryptosystem, what hard problems are left
to solve to make a cryptocurrency?&lt;/p&gt;
&lt;div class="gap"&gt;
&lt;/div&gt;

&lt;h3&gt;Martin Luther King at the University&lt;/h3&gt;
&lt;p&gt;There's no class on Monday to honor Martin Luther King day.  Students
are encouraged to use the class time to read Paul Gaston's &lt;a href="http://www.virginia.edu/woodson/pubs/aa.htm"&gt;&lt;em&gt;Honor to
the Class of 1969&lt;/em&gt;&lt;/a&gt; and to
learn about &lt;a href="https://web.archive.org/web/20100615104829/http://cti.itc.virginia.edu/~hius316/desegregation/deseghome50s.html"&gt;&lt;em&gt;Desegregation at the University of Virginia and its
Surrounding
Communities&lt;/em&gt;&lt;/a&gt;
(including &lt;a href="https://web.archive.org/web/20070503051645/http://cti.itc.virginia.edu/~hius316/desegregation/pace1.html"&gt;President Darden's
letter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Why is &lt;a href="http://www.nytimes.com/1997/08/26/us/e-f-shannon-jr-79-dies-forceful-chief-of-u-of-virginia.html"&gt;Edgar
Shannon&lt;/a&gt;
the only past-president of UVa with nothing significant at the
University named after him?  Why does the University still have
courtyards and schools named after Colgate Darden and none for &lt;a href="http://www.virginia.edu/woodson/projects/kenan/swanson/swanson.html"&gt;Gregory
Swanson&lt;/a&gt;
or &lt;a href="http://artsandsciences.virginia.edu/meredithwoo/blog/the-desegregated-heart/"&gt;Sarah Patton
Boyle&lt;/a&gt;?&lt;/p&gt;
&lt;div class="gap"&gt;
&lt;/div&gt;

&lt;p&gt;How do the actions of our current administration (especially in response
to recent events) compare to those of the 1960s?  &lt;/p&gt;
&lt;div class="gap"&gt;
&lt;/div&gt;

&lt;p&gt;Will there be justification for an &lt;em&gt;Honor to the Class of
2015/2016/2017/2018&lt;/em&gt; essay?
&lt;div class="gap"&gt;
&lt;/div&gt;&lt;/p&gt;</summary></entry><entry><title>Class 1: Why are these buildings burning down?</title><link href="http://bitcoin-class.org/class-1-why-are-these-buildings-burning-down.html" rel="alternate"></link><updated>2015-01-12T00:00:00-05:00</updated><author><name>David Evans</name></author><id>tag:bitcoin-class.org,2015-01-12:class-1-why-are-these-buildings-burning-down.html</id><summary type="html">&lt;p&gt;&lt;div class="phighlight"&gt;
   &lt;a href="http://bitcoin-class.org/classes/class1/class1.pdf"&gt;PDF version for printing&lt;/a&gt;
   &lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Schedule&lt;/h2&gt;
&lt;p&gt;&lt;div class="todo"&gt;
Before 11:59pm tomorrow (Tuesday, 13 January):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; &lt;a href="http://bitcoin-class.org/pages/syllabus.html"&gt;Course Syllabus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; &lt;a href="http://bitcoin-class.org/readings/magic_of_mining.pdf"&gt;&lt;em&gt;The Magic of
Mining&lt;/em&gt;&lt;/a&gt;, The Economist, 10
January 2015.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Read:&lt;/strong&gt; 
&lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch01.asciidoc"&gt;&lt;em&gt;Chapter 1: Introduction&lt;/em&gt;&lt;/a&gt;
and
&lt;a href="https://github.com/aantonop/bitcoinbook/blob/develop/ch02.asciidoc"&gt;&lt;em&gt;Chapter 2: How Bitcoin Works&lt;/em&gt;&lt;/a&gt;
from Andreas M. Antonopoulos, &lt;a href="https://github.com/aantonop/bitcoinbook"&gt;&lt;em&gt;Mastering Bitcoin: Unlocking Digital
Cryptocurrencies&lt;/em&gt;&lt;/a&gt; book (also
available &lt;a href="http://www.amazon.com/Mastering-Bitcoin-Unlocking-Digital-Crypto-Currencies/dp/1449374042"&gt;in
print&lt;/a&gt;).  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt; a bitcoin wallet (if you don't already have one,
&lt;a href="https://multibit.org/"&gt;MultiBit&lt;/a&gt; is a good choice for this).  After
creating a wallet, you should find the Recieving Address, to use in PS0.
Note that it is not necessary now, or at any time during this class, for
you to actually buy bitcoins with your own money.  If you are inclined
to do this, be careful, and don't use any funds you cannot afford to
lose!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Submit&lt;/strong&gt; &lt;a href="http://bitcoin-class.org/pages/ps0.html"&gt;Problem Set 0&lt;/a&gt; before
&lt;strong&gt;11:59pm tomorrow&lt;/strong&gt; (Tuesday, 13 January).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;&lt;center&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/43441659"
width="476" height="400" frameborder="0" marginwidth="0"
marginheight="0" scrolling="no"&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;What is currency?&lt;/p&gt;
&lt;p&gt;&lt;div class="gap"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Every commodity admits two uses: (1) its proper use, (2) its use as an article of exchange.&lt;/em&gt;&lt;br /&gt;
Aristotle's &lt;a href="https://play.google.com/books/reader?id=1J7N4eAKuhwC&amp;amp;printsec=frontcover&amp;amp;output=reader&amp;amp;hl=en&amp;amp;pg=GBS.PR13"&gt;&lt;em&gt;Politics&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What properties should a currency have?&lt;/p&gt;
&lt;div class="gap"&gt;&lt;/div&gt;

&lt;p&gt;What is a &lt;em&gt;fiat currency&lt;/em&gt;?&lt;/p&gt;
&lt;div class="gap"&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;All these pieces of paper are, issued with as much solemnity and authority as if they were of pure gold or silver... and indeed everybody takes them readily, for wheresoever a person may go throughout the Great Kaan's dominions he shall find these pieces of paper current, and shall be able to transact all sales and purchases of goods by means of them just as well as if they were coins of pure gold.&lt;/em&gt;&lt;br /&gt;
Macro Polo (on Yuan Dynasty paper money, 13th century)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Was salt a fiat currency as used by the Romans?
&lt;div class="gap"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Was salt a fiat currency as used by the Han Dynasty?&lt;/p&gt;
&lt;div class="gap"&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://sinosphere.blogs.nytimes.com/2014/11/21/chinas-millenniums-old-salt-monopoly-no-match-for-economic-reform/"&gt;&lt;em&gt;Chinaâ€™s Millenniums-Old Salt Monopoly No Match for Economic Reform&lt;/em&gt;&lt;/a&gt;, New York Times, 21 November 2014.&lt;/p&gt;
&lt;p&gt;What does it mean to &lt;em&gt;own&lt;/em&gt; something digital?
&lt;div class="gap"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2&gt;Questions&lt;/h2&gt;
&lt;p&gt;Why will bitcoin mining facilities continue to frequently burn down?&lt;/p&gt;
&lt;div class="gap"&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://bravenewcoin.com/news/bitcoin-hashrate-jumps-then-drops-how/"&gt;&lt;em&gt;How $3.6 Million Worth Of Bitcoin Mining Equipment Went Up In Smoke&lt;/em&gt;&lt;/a&gt;, Brave New Coin, 6 November 2014.&lt;/p&gt;
&lt;p&gt;Why are there &lt;a href="https://angel.co/cryptocurrency-2"&gt;over 600 cryptocurrency startups&lt;/a&gt;?&lt;/p&gt;
&lt;div class="gap"&gt;&lt;/div&gt;</summary></entry></feed>